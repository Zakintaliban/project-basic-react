{"version":3,"sources":["components/counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","state","value","buttonAddClicked","bind","buttonSubClicked","event","this","setState","alert","onClick","React","Component","App","changeLoadingState","isLoading","getElementName","index","data","console","log","classMateName","classMate","id","className","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQA4CeA,E,YAzCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEC,MAAM,GACrB,EAAKC,iBACL,EAAKA,iBAAiBC,KAAtB,gBACA,EAAKC,iBACL,EAAKA,iBAAiBD,KAAtB,gBANe,E,8EAQFE,GACbC,KAAKC,SAAS,CAAEN,MAAOK,KAAKN,MAAMC,MAAQ,M,uCAG7BI,GACY,IAArBC,KAAKN,MAAMC,MACXO,MAAM,iCAENF,KAAKC,SAAS,CACVN,MAAOK,KAAKN,MAAMC,MAAQ,M,+BAOlC,OACI,6BACA,6BACKK,KAAKN,MAAMC,OAEhB,4BAAQQ,QAAWH,KAAKJ,kBAAxB,UAGA,4BAAQO,QAAWH,KAAKF,kBAAxB,e,GAjCUM,IAAMC,WCkEbC,E,YA/Db,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KAWRc,mBAAqB,WACnB,EAAKN,SAAS,CACZO,WAAY,EAAKd,MAAMc,aAdR,EAkBnBC,eAAiB,SAACC,EAAOC,GACvBC,QAAQC,IAAR,WAAgBH,EAAhB,aAA0BC,IAC1B,EAAKV,SAAS,CACZa,cAAeH,KAlBjB,EAAKjB,MAAQ,CACXc,WAAW,EACXO,UAAW,CAAC,QAAS,QAAS,SAC9BD,cAAe,IANA,E,sEAyBT,IAAD,OACP,OAAKd,KAAKN,MAAMc,UAIZ,yBAAKQ,GAAG,WAAWC,UAAU,OAC3B,yBAAKd,QAASH,KAAKO,oBAChBP,KAAKN,MAAMc,UAAY,WAAa,aAGvC,6BACE,8DACA,4BACGR,KAAKN,MAAMqB,WACVf,KAAKN,MAAMqB,UAAUG,KAAI,SAACP,EAAMD,GAC9B,OACE,wBACES,IAAKT,EACLP,QAAS,kBAAM,EAAKM,eAAeC,EAAOC,KAEzCA,QAOb,6BACE,mDACCX,KAAKN,MAAMoB,eAAiB,2BAAId,KAAKN,MAAMoB,gBAE9C,kBAAC,EAAD,OA7BG,yBAAKX,QAASH,KAAKO,oBAAnB,W,GA5BKF,aCQEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.94cd634c.chunk.js","sourcesContent":["import React from \"react\"\n\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value:0 };\n        this.buttonAddClicked =\n        this.buttonAddClicked.bind(this);\n        this.buttonSubClicked =\n        this.buttonSubClicked.bind(this);\n    }\n    buttonAddClicked(event) {\n        this.setState({ value: this.state.value + 1 }\n        );\n    }\n    buttonSubClicked(event) {\n        if (this.state.value === 0) {\n            alert(\"jangan dipaksa woi, udah abis\")\n        } else { \n            this.setState({ \n                value: this.state.value - 1 \n            })\n        }\n        \n    }\n\n    render() {\n        return (\n            <div>\n            <div>\n                {this.state.value}\n            </div>\n            <button onClick = {this.buttonAddClicked}>\n                tambah \n            </button>\n            <button onClick = {this.buttonSubClicked}>\n                kurang\n            </button>\n        </div>\n        )\n        \n    }\n}\n\nexport default Counter","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Counter from \"./components/counter.js\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      classMate: [\"Auzan\", \"Iqbal\", \"Zakin\"],\n      classMateName: \"\"\n    };\n\n    // this.changeLoadingState = this.changeLoadingState.bind(this);\n  }\n\n  changeLoadingState = () => {\n    this.setState({\n      isLoading: !this.state.isLoading\n    });\n  };\n\n  getElementName = (index, data) => {\n    console.log(`[${index}] ${data}`);\n    this.setState({\n      classMateName: data\n    });\n  };\n\n  render() {\n    if (!this.state.isLoading) {\n      return <div onClick={this.changeLoadingState}>Ups</div>;\n    } else {\n      return (\n        <div id=\"fragment\" className=\"App\">\n          <div onClick={this.changeLoadingState}>\n            {this.state.isLoading ? \"Ini true\" : \"Ini false\"}\n          </div>\n\n          <div>\n            <h1>Ini data data dari state array</h1>\n            <ul>\n              {this.state.classMate &&\n                this.state.classMate.map((data, index) => {\n                  return (\n                    <li\n                      key={index}\n                      onClick={() => this.getElementName(index, data)}\n                    >\n                      {data}\n                    </li>\n                  );\n                })}\n            </ul>\n          </div>\n\n          <div>\n            <h1>Ini nama temen saya</h1>\n            {this.state.classMateName && <p>{this.state.classMateName}</p>}\n          </div>\n          <Counter/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}